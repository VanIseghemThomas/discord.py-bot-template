import discord
from discord import app_commands
import os
import datetime
from utils import *
from repositories.template_api_repo import TemplateApiRepository
from client import DiscordClient

import logging
logging.basicConfig(format='[%(levelname)s][%(name)s] %(asctime)s | %(message)s', datefmt='%d-%b-%y %H:%M:%S', level=logging.INFO)

DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')

intents = discord.Intents.default()
client = DiscordClient(intents=intents)

# Load text commands from the json as a dict
commands_dict = load_commands()

# Register the simple text commands from the json
# This is a hacky way and there might be a way better way to do this
for command in commands_dict:
    value = commands_dict[command]
    description = "No description"

    if "description" in value.keys():
        description = value["description"]

    @client.tree.command(name=command, description=description)
    async def text_reply(interaction: discord.Interaction):
        command_name = interaction.data["name"]
        command_obj = commands_dict[command_name]
        await interaction.response.send_message(command_obj["response"])

@client.event
async def on_ready():
    logging.info('We have logged in as {0.user}'.format(client))

@client.tree.command(name="generated", description="This command showcases a generated response.")
async def generated_one(interaction: discord.Interaction):
    logging.info("Sending generated response 1")
    await interaction.response.send_message("This simple response is generated by the bot itself")

@client.tree.command(name="generated2", description="This command showcases a dynamically generated response.")
async def generated_two(interaction: discord.Interaction):
    logging.info("Sending generated response 2")
    await interaction.response.send_message(f'This response is dynamically generated at {datetime.datetime.now()}')

@client.tree.command(name="hi", description="Take the input from a message and use it to respond")
@app_commands.describe(name="What is your name?")
async def hi(interaction: discord.Interaction, name: str):
    logging.info("Saying hi")
    await interaction.response.send_message(f'Hello {name}, how are you today?')

@client.tree.command(name="fromapi", description="Get's data from the api running as a microservice along the bot and returns it as a response.")
async def api_response(interaction: discord.Interaction):
    logging.info("Sending api fetched repsonse")
    await interaction.response.defer()
    response = await TemplateApiRepository.get_example_data()
    data = response['data']
    await interaction.followup.send(data)

client.run(DISCORD_TOKEN)